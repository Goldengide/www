<?php
/**
 * Step 1: Require the Slim Framework
 *
 * If you are not using Composer, you need to require the
 * Slim Framework and register its PSR-0 autoloader.
 *
 * If you are using Composer, you can skip this step.
 */
// require __DIR__ .'/../vendor/autoload.php';
require '../vendor/autoload.php';


// require 'Slim/Slim.php';
// \Slim\Slim::registerAutoloader();

/**
 * Step 2: Instantiate a Slim application
 *
 * This example instantiates a Slim application using
 * its default settings. However, you will usually configure
 * your Slim application now by passing an associative array
 * of setting names and values into the application constructor.
 */

$app = new \Slim\Slim(array
    (
        'debug' => true,
        'mode' => 'development'
    )
);
 

//Add authentication and Cache middlewares
//$app->add(new \Authentication());

/**
 * Step 3: Define the Slim application routes
 *
 * Here we define several Slim application routes that respond
 * to appropriate HTTP request methods. In this example, the second
 * argument for `Slim::get`, `Slim::post`, `Slim::put`, `Slim::patch`, and `Slim::delete`
 * is an anonymous function.
 **/

// GET route

$json_output = array();
define('TOKEN_EXPIRY_PERIOD', '+15 days');
define('YEARLY_EXPIRY_PERIOD', '+1 year');
define('MONTHLY_EXPIRY_PERIOD', '+1 month');

//Test Config
define('MERCHANT_ID', '01817'); //the ID auto-generated by CIPG for the merchant.

$redirect_url = array(
    'success' => 'localhost/pages/success.html',
    'failure' => 'localhost/pages/failure.html',
    'pending' => 'localhost/pages/pending.html',
    'cancelled' => 'localhost/pages/cancelled.html',
    'not_processed' => 'localhost/pages/not_processed.html'
);




$app->get('/', function() use ($app) {

    //Set the response header to json
    $app->response->header('Content-Type', 'application/json');

    $json_output['meta']["status"] = 0;
    $json_output['meta']["message"] = "Watch Out...";
    
    $json_output['data']["name"] = "Central Market App API";
    $json_output['data']["version"] = '1.0';
    $json_output['data']["company"] = 'Final Year Project';
    $json_output['data']["author"] = "Gideon Amowogbaje";
    $json_output['data']["date"] = "Wednesday 13, April 2016";
    echo json_encode($json_output);
});

$app->post('/login', function() use ($app){
    
    $json_output['meta']["status"] = 0;
    $json_output['meta']["message"] = "";

    try {
        
        $nickname = $app->request->post('nickname');
        $password = $app->request->post('password');

        if(isset($nickname) && isset($password)) {
            
            $pass = hash('sha512', $password);
            $user = User::select('id', 'nickname','phonenumber', 'password')
                        ->whereRaw('nickname = ? and password = ?', array($nickname, $pass))
                        ->first();

            if(isset($user)) {
                $userToken = new Usertoken;

                $now = date('Y-m-d h:i:s');
                $token = hash('md5', $now);
                $expirydate = strtotime(TOKEN_EXPIRY_PERIOD);
                $str_expirydate = date('Y-m-d h:i:s', $expirydate);
                
                $userToken = Usertoken::where('user_id', '=', $user->id)->first();
                
                if(!isset($userToken))
                    $userToken = new Usertoken;

                $userToken->user_id = $user->id;
                $userToken->token = $token;
                $userToken->expires = $str_expirydate;
                $userToken->lastusedate = $now;
                $userToken->save();


                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Login successfully";
                
                $userArray = $user->toArray();
                $userArray['token'] = $token;
                $userArray['password'] = "*****";
                $json_output['data']['user'] = $userArray;

            } else {

                $json_output['meta']["status"] = 2;
                $json_output['meta']["message"] = "Invalid Nickname and/or Password!";
            }

        } else {

            $json_output['meta']["status"] = 3;
            $json_output['meta']["message"] = "Nickname or Password cannot be empty!";
        } 

        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});

$app->get('/register', function() use ($app) {

    try {

        $user = new User;
        $user->phonenumber = $app->request->get('phonenumber');

        //Remove duplicate entries
        $dResult = User::where('phonenumber', '=', $user->phonenumber)->first();

        if(!empty($dResult)) {
            $user = $dResult;
        } else {


            $user->nickname = $app->request->get('nickname');
            $user->phonenumber = $app->request->get('phonenumber');
           // $user->password = $app->request->get('password');
            $pass = $app->request->get('password');
            $user->password = hash('sha512', $pass);
            $user->save();
        }

        unset($user->password);

        /*$userToken = Usertoken::where('user_id', '=', $user->id)->first();

        if(!isset($userToken))*/

        $dataUser["user"] = $user->toArray();

        echoJSONResponse($app, 0, "User Created successfully!", $dataUser);

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }
});

$app->post('/store/add', function() use ($app) {

    try {

        $store = new Store;
        $store->name = $app->request->post('name');

        //Remove duplicate entries
        $dResult = Store::where('name', '=', $store->name)->first();

        if(!empty($dResult)) {
            $store = $dResult;
        } else {


            $store->address = $app->request->post('address');
            $store->save();
        }


        /*$userToken = Usertoken::where('user_id', '=', $user->id)->first();

        if(!isset($userToken))*/

        $dataStore["store"] = $store->toArray();

        echoJSONResponse($app, 0, "Store Registered successfully!", $dataStore);

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }
});      
$app->post('/product/add', function() use ($app) {

    try {
        $product = new Product;
        $product->name = $app->request->post('name');
        

        //Remove duplicate entries
        $dResult = Product::where('name', '=', $product->name)->first();

        if(!empty($dResult)) {
            $product = $dResult;
        } else {
        $product->price = $app->request->post('price');
        $product->store_id = $app->request->post('store_id');
        $product->cat_id = $app->request->post('cat_id');
        $product->no_in_store = $app->request->post('no_in_store');     
        $product->save();
        }
            
        $dataStore["product"] = $product->toArray();

        echoJSONResponse($app, 0, "Product Registered successfully!", $dataStore);







    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }
});
$app->post('/product/update/:id', function($id) use ($app) {

    try {

        $product = Product::find($id);

        $product->price = $app->request->post('price');
        $product->cat_id = $app->request->post('cat_id');
        $product->no_in_store = $app->request->post('no_in_store');
        $dResult = Product::where('name', '=', $product->name)->first();
        $product = $dResult;
        $productData = $product->toArray();

            if ($product->save()) {
               $json_output['meta']["status"] = 0;
               $json_output['meta']["message"] = "Request successfully";
               $json_output['data']["product"] = $productData;
            }
            else{
                $json_output['meta']["status"] = 1;
                $json_output['meta']["message"] = "Check your parameter";
            }
        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);
            

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }
});
$app->get('/store/:id', function($id) use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $store = Store::find($id);
            //$user = User::select('id', 'nickname','phonenumber', 'password')
            //           ->find($id);

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $storeArray = $store->toArray();
                $json_output['data']['store'] = $storeArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});
$app->get('/product/:id', function($id) use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $product = Product::find($id);
            //$user = User::select('id', 'nickname','phonenumber', 'password')
            //           ->find($id);

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $productArray = $product->toArray();
                $json_output['data']['product'] = $productArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});
$app->get('/store', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $store = Store::all();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $storeArray = $store->toArray();
                $json_output['data']['store'] = $storeArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});
$app->get('/products', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $product = Product::all();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $productArray = $product->toArray();
                $json_output['data']['product'] = $productArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});
$app->get('/user/:id', function($id) use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $user = User::find($id);
            //$user = User::select('id', 'nickname','phonenumber', 'password')
            //           ->find($id);

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $userArray = $user->toArray();
                $json_output['data']['user'] = $userArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});

$app->get('/user', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $user = User::all();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $userArray = $user->toArray();
                $json_output['data']['user'] = $userArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});

$app->post('/image/post', function() use ($app) {

    try {

            // specify Url to upload Images
            $url_prefix = "../contents/";
            $folder = $url_prefix."imagesforpoll";
            $ImageObject = new ImagePoll;
            $user_id = 2;
            // id is user authenticated Id
            //$id = $_SESSION['id'];

            if (!is_dir($folder)) 
            {

               mkdir($folder);

            } 
            if(!isset($_FILES["image"]["name"]))
            {

                $json_output['meta']["status"] = 3;
                $json_output['meta']["message"] = "Select an image";
            }
            else 
                        {
                             $no = ImagePoll::count();
                             $newFilename = md5($no);

                            if ((($_FILES["image"]["type"] == "image/gif")||($_FILES["image"]["type"] == "image/jpeg")|| ($_FILES["image"]["type"] == "image/png")|| ($_FILES["image"]["type"] == "image/pjpeg"))&& ($_FILES["image"]["size"] < 2000000)) 
                            {
                                $ext = pathinfo($_FILES["image"]["name"], PATHINFO_EXTENSION);
                                    
                                    if (!is_file($folder."/".$_FILES["image"]["name"])) 
                                    {
                                             
                                            move_uploaded_file($_FILES["image"]["tmp_name"], $folder."/".$newFilename . "." . $ext);
                                            
                                            
                                            $imageurl = $folder."/".$newFilename.".".$ext;

                                            //return $imageurl;
                                            $ImageObject->user_id = $user_id;
                                            
                                            $ImageObject->image = $imageurl;

                                            $ImageObject->textimage = $app->request->post('text');
                                           
                                            $ImageObject->image_duration = $app->request->post('duration');
                                            
                                            $ImageObject->yes = 0;
                                            
                                            $ImageObject->no = 0;

                                            $ImageObject->maybe = 0;
                                            
                                            $ImageObject->total = $ImageObject->yes + $ImageObject->no + $ImageObject->maybe;
                                            
                                            $ImageObject->poll_titlemage = $app->request->post('imagetitle');
                                            
                                            $ImageObject->access_list = "";
                                            
                                            $ImageObject->created_at = date("Y-m-d");
                                            
                                            $ImageObject->updated_at = date("Y-m-d");
                                            
                                            if ($ImageObject->save()) 
                                            {
                                                $json_output['meta']["status"] = 0;
                                                $json_output['meta']["message"] = "Image successfully saved";
                                                $json_output['data']["imageurl"] = $imageurl;
                                                $json_output['data']["text"] = $imageurl;
                                            }
                                            else 
                                            {
                                                $json_output['meta']["status"] = 3;
                                                $json_output['meta']["message"] = "Failed to save image";
                                            }

                                    }
                                    else 
                                    {

                                        $json_output['meta']["status"] = 2;
                                        $json_output['meta']["message"] = "Image already exist";
                                    }
                                    

                            }
                            else 
                            {

                            $json_output['meta']["status"] = 3;
                            $json_output['meta']["message"] = "File is not an Image";

                                
                            }

                        }
            

        $phonenumber = $app->request->post('nickname');
        echo $phonenumber;

                $app->response->header('Content-Type', 'application/json');
                 echo json_encode($json_output);

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }
});


$app->get('/checkdates(/:year(/:month(/:day)))', function($year, $month, $day) use ($app){

    $formatted_date = $year.'-'.$month.'-'.$day; 
    $longdate = strtotime($formatted_date);
    echo $longdate . ', ';
    echo date('Y-m-d', $longdate);
});

function getUserIdFromToken($app) {

    $env = $app->environment();
    $token = $app->request->params('token');
    return $env[$token]['user_id'];
}


$app->run();
